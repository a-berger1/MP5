1--0--0--0--0--0--For The first level, you need one Transistor. A transistor is the smallest building block of all digital logic, all the way up to the computer you're running this program on! Add it by clicking the "Add Transistor" button located in the "Gates" section of the "Toolbar". Drag the Transistor to the middle of the screen. Now we are going to wire up this Transistor and talk about how it works. In order to draw wires, the Lock Gates button must be engaged. Draw a wire from one of the rectangles located at the top of the screen (Called a source block in this application) to the top center of the Transistor. This supplies power to our Transistor. Now connect a wire from the bottom of the Transistor to the block located at the bottom of the screen, which is called a Ground Block" in this application. So far, nothing exciting has happened, but that's about to change. The node on the left hand side of the Transistor can be thought of like a light switch. when a signal is applied to it, power flows through the resistor, from the input pin to the output pin. Go ahead and apply a signal to this pin. Woah! The gate lights up. This glow indicates power is flowing through the transistor. Level 1 is now complete, but feel free to hang out here and play around with this transistor.
2--1--0--0--0--0--Alright, for the next level You're going to need two Transistors. It's time to construct an "And Gate" out of nothing but two lowly Transistors. Add them now using the Add Transistor button. An "And Gate" only allows a signal to pass through if both "Input Pins" (Located on the top in our case) are powered. Place two Transistors one above the other, with a little bit of space in between them, then lock the gates. Draw a wire connecting one of the source blocks to the top Transistor. This supplies power to our "And Gate." Next, connect the output of the top Transistor to the input of the lower Transistor. Now Connect the Output of the lower Transistor to the Ground Block. Notice how the Transistors do not light up, as they are not currently passing power through them. Power each "Switch Pin" with one of the Source Blocks. Notice how the Transistors light up? This indicates signal is passing through them. This simple setup is called an "And Gate" as it requires both switch pins to be Activated. Press the "Add And Gate" button. The gate that appears is a shorthand way to draw the "And Gate" we formed from the Transistors. From now on, when asked to use an And Gate, this is what should be used. Level 2 is done, play around with the exciting new And Gate, or move on to learn about another exciting topic, "Or Gates!"
2--0--1--0--0--0--This level is all about options. You can always have this, OR that, you can always do this OR that, that's right, this level is all about the Or Gate. The Or gate outputs a signal if at least one of it's inputs is powered. In order to create one, place two transistors side by side. Don't forget to lock the gates, then connect the input pins to the source blocks above, and the output pins to the ground block below. Now switch the wire color, and draw a wire to one of the source pins. Notice how the transistor lights up? This means our Or Gate is outputting a signal. Now press the "Remove Current Color" button. Notice how neither Transistor is outputting to the other side? This means the Or Gate is not outputting a signal. Connect the other Transistor. Now the gate is outputting a signal once again. At this time, connect both Transistor inputs to the source blocks. notice how both Transistors are on? The Or gate is still outputting. Pretty cool, huh? Play with the Or Gate some more!
2--0--1--1--0--0--This Level is going to be a little bit different. The gate we are exploring here is not possible to make without explaining some more complex circuitry that falls outside the scope of this program. The gate for this level is the Exclusive Or Gate, or "XOr Gate". This gate is very similar to the "Or Gate" from the last Level, but it has one key difference. Like the Or Gate, the XOr Gate passes a signal whenever either input is on. Unlike the Or Gate, an XOr gate does not allow a signal to pass if both inputs are on. Without a little bit of insider information, which you will get in the next Level, this seems unimportant, but without XOr gates, computers could not do math, and a computer that can't do math is not much of a computer at all. To experiment with what an XOr Gate has to offer, press the add XOr Gate button, drag it to the center of the screen, lock the gates, and start connecting wires, to see how it works. It is suggested to place an Or Gate and an XOr Gate side by side and compare their functionality.
0--0--0--0--1--0--Now things are going to get a little bit trickier. We are going to start combining the gates we know to make a simple computer. That's right, we are going to make a computer, right here on this very screen. The secret that allows this to work is the magic of binary mathematics. When we count things, we use a system called base 10. This means in every column, or "place", there are ten possible digits that could be located there: 0-9. Binary is almost the same thing, the only difference being that there are only two possible digits, 0 and 1. Likewise, rather than having a "Ones" column, a "Tens" column, a "Hundreds" column, etc,which if you will notice are multiples of Ten, binary's columns represent "Ones", "Twos", "Fours", etc, multiples of Two. This system is convenient for computers, as it can be transmitted very easily. To represent a value of 0, don't output any signal. To represent a 1, output a signal. 1 is on, 0 is off. One of the coolest things about Binary, is that doing addition works very similarly to base 10, but can be done by a computer. The way this addition is done is by using a little logic gate called an adder. There are multiple types of adders, but the kind we are discussing first is the basic half adder. A half adder, tests whether a place should have a 1 or a 0, as well as whether or not to carry, which is a concept anyone who has done long addition should be familiar with. On This level you can grab a Half Adder, and play with it to see if you can figure out how it works. The next level will go into more detail.
0--1--0--1--1--0--Ok, So BInary is made up of 1s, and 0s. Cool. What does that mean? Well it means the number 13 in standard everyday base 10 can be written in Binary. In Fact, 13 is written as "1101" How does that work? well starting from right to left, each column holds a value of twice that of the previous one, starting from 1. The rightmost column is the 1s column, just like base 10, only this time instead of going up to 9, it goes up to 1. Just like base 10, when a column is "full," the digit in that column goes back to 0, and the column to the left goes up by 1. This process of moving full places to the left is known as "carrying." In Binary, adding two numbers is done by 2 simple logic gates. IF one of the numbers has a 1 in the current column, output 1. If both of the digits in this column are 1, 1 + 1 = 2, which means it's time to carry! The outputPin(s) becomes 0, and the carry pin lights up. COngratulations you can now count to two in binary, now let's make a gate which can do this for me. This gate is just a combination of two very common gates. an And, and an XOr. The XOr only turns on if one of its input pins is 1 and the other is 0. The output of this XOr is generally defined as S, or the signal out for this column. The Carry is computed by the And Gate. IF Both inputs are on, then that column was filled up, and must overflow into the next place. for an example of 1 + 1, in Binary, the answer is 10, which is 2 in Base 10. Draw a Half Adder. Keep in mind that both source blocks should be in use, and the XOr gate is your signal, and the And Gate represents the Carry.



